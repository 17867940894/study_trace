package Month3.Month3_11;

public class HomeWork_4 {
    /*
    1. 计算下列表达式的结果,以文字分析阐述结果由来
    10/3;   10/5;   10%2;    -10.5%3
    解释：
         1. `10/3`:
         - 在Java中，当两个整数相除时，结果将是整数部分，即舍去小数部分。因此，`10/3`的结果是`3`。这是因为整数相除会得到一个整数结果，小数部分被舍弃。
         2. `10/5`:
         - 同样地，`10/5`也是整数相除，结果是`2`。因为整数相除会截断小数部分。
         3. `10%2`:
         - `%` 运算符表示取余操作。在这种情况下，`10%2`表示10除以2的余数，结果是`0`。因为10可以被2整除，余数为0。
         4. `-10.5%3`:
         - 对于负数的取余操作，`-10.5%3`的结果将是负数或0. `-10.5` 是double类型，计算 `-10.5 % 3`，结果是 `-1.5`。

         综上所述，这些表达式的结果分别是：
         - `10/3` 的结果是 `3`
         - `10/5` 的结果是 `2`
         - `10%2` 的结果是 `0`
         - `-10.5%3` 的结果是 `-1.5`

2.思考下面代码j的结果是多少,以文字分析阐述结果由来
    int i = 10;
    int j = ++i+i
    System.out.println(j);

    解释：
    1. `int i = 10;`: 在这行代码中，将整数变量 `i` 初始化为 `10`。
    2. `int j = ++i + i;`:
       - `++i` 表示先将 `i` 的值加一，然后将增加后的值赋给 `i`。因此，`++i` 将使 `i` 的值从 `10` 变为 `11`。
       - 然后，将 `i` 的增加后的值 `11` 与原始的 `i` 值 `10` 相加，得到 `11 + 10 = 21`。
       - 最后，将结果 `21` 赋给变量 `j`。

3.多选题，以下赋值语句正确的是() 并指出说明所有赋值错误选项的原因
A. `int num1 = int "10";`
   - 正确答案应该是 `int num1 = 10;`，去掉多余的 `int` 和引号。因此，这个选项是错误的。
B. `int num2 = 18.0;`
   - `int` 类型不能直接赋值为浮点数，应该使用整数。因此，这个选项是错误的。
C. `double num3 = 30;`
   - 正确，整数可以直接赋值给 `double` 类型，因为整数会被自动转换为浮点数。因此，这个选项是正确的。
D. `double num4 = 8;`
   - 同样正确，整数可以直接赋值给 `double` 类型。这个选项也是正确的。
E. `int i = 49; char ch = i + 1;`
   - 这个选项是错误的。虽然数据没有损失，但需要进行强制类型转换。
F. `byte b = 19; short s = b + 2;`
   - 这个选项也是错误的。可能会发生精度丢失

综上所述，正确的赋值语句是：C , D

4.思考以下题目的输出结果，并说明运算过程
      题目一：
        int x = 3;
        int y = 3;
        if (x++==4 & ++y==4){
            x = 10;
        }
        System.out.println("x =? "+ x + "y =?"+y);

        解释：
            在这段代码中，`&` 是按位与运算符，会对两个条件都进行计算，而不会像 `&&` 运算符那样短路。
            由于 ‘x++’ != 4。因此，`if` 语句中的代码块（将 `x` 设为 10）不会被执行。
            在 `if` 语句之后，`System.out.println` 语句将打印出 `x` 和 `y` 的值，
            因此，这段代码的输出结果将是：
             x =? 4 y =?4

      题目二:
        int x = 3;
        int y = 3;
        if (x++==4 && ++y==4){
               x = 10;
        }
        System.out.println("x =? "+ x + "y =?"+y);

        解释：
            在这段代码中，`&&` 是逻辑与运算符，会在第一个条件为假的情况下短路，不再计算第二个条件。
            由于 `x` 和 `y` 的初始值都是 3，所以第一个条件 `(x++ == 4)` 不满足不会进入方法体，
            `x` 的值在比较之后会增加到 4，
            因此，这段代码的输出结果将是：
            x =? 4 y =?3

      题目三:
         int x = 3;
         int y = 3;
         if (x++==3 || ++y==3){
              x = 10;
         }
         System.out.println("x =? "+ x + "y =?"+y);

         解释：
             `||` 是逻辑或运算符，会在第一个条件为真的情况下短路，不再计算第二个条件。
             由于 `x` 和 `y` 的初始值都是 3，所以第一个条件 `(x++ == 3)` 成立，因为 `x` 的值在比较之后会增加到 4，而逻辑或运算符 `||` 的特性会导致第二个条件 `++y == 3` 不会被计算，
             因此，`if` 语句中的代码块（将 `x` 设为 10）会被执行。
             因此，这段代码的输出结果将是：
             x =? 10 y =?3
     */
}
